from rest_framework import serializers
from drf_yasg.utils import swagger_serializer_method
from .models import (
    User, CollectionPoint, TrashReport, UserRank, Team, Challenge, 
    UserChallenge, EcoTip, Comment, DailyTask, UserDailyTask,
    TeamCompetition, TeamCompetitionResult, Notification, CleanupEvent,
    Achievement, UserAchievement, News
)
from django.contrib.auth import get_user_model

User = get_user_model()

class UserRankSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–Ω–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    class Meta:
        model = UserRank
        fields = '__all__'
        swagger_schema_fields = {
            "title": "–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "description": "–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        }

class TeamSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥.
    """
    members_count = serializers.SerializerMethodField()
    leader_name = serializers.CharField(source='leader.username', read_only=True)

    class Meta:
        model = Team
        fields = '__all__'
        swagger_schema_fields = {
            "title": "–ö–æ–º–∞–Ω–¥–∞",
            "description": "–ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
        }

    @swagger_serializer_method(serializer_or_field=serializers.IntegerField)
    def get_members_count(self, obj):
        return obj.members.count()

class UserSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã.
    """
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'points', 'profile_photo', 'bio']
        swagger_schema_fields = {
            "title": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "description": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã"
        }

class ChallengeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Challenge
        fields = '__all__'

class UserChallengeSerializer(serializers.ModelSerializer):
    challenge_details = ChallengeSerializer(source='challenge', read_only=True)

    class Meta:
        model = UserChallenge
        fields = '__all__'

class EcoTipSerializer(serializers.ModelSerializer):
    class Meta:
        model = EcoTip
        fields = '__all__'

class CommentSerializer(serializers.ModelSerializer):
    user_name = serializers.CharField(source='user.username', read_only=True)
    user_photo = serializers.ImageField(source='user.profile_photo', read_only=True)

    class Meta:
        model = Comment
        fields = '__all__'

class DailyTaskSerializer(serializers.ModelSerializer):
    class Meta:
        model = DailyTask
        fields = '__all__'

class UserDailyTaskSerializer(serializers.ModelSerializer):
    task_details = DailyTaskSerializer(source='task', read_only=True)

    class Meta:
        model = UserDailyTask
        fields = '__all__'

class TeamCompetitionSerializer(serializers.ModelSerializer):
    class Meta:
        model = TeamCompetition
        fields = '__all__'

class TeamCompetitionResultSerializer(serializers.ModelSerializer):
    team_name = serializers.CharField(source='team.name', read_only=True)

    class Meta:
        model = TeamCompetitionResult
        fields = '__all__'

class NotificationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Notification
        fields = '__all__'

class CleanupEventSerializer(serializers.ModelSerializer):
    organizer_name = serializers.CharField(source='organizer.username', read_only=True)
    participants_count = serializers.SerializerMethodField()

    class Meta:
        model = CleanupEvent
        fields = '__all__'

    def get_participants_count(self, obj):
        return obj.participants.count()

class TrashReportSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ –º—É—Å–æ—Ä–µ.
    """
    user_name = serializers.CharField(source='user.username', read_only=True)
    comments = CommentSerializer(many=True, read_only=True)

    class Meta:
        model = TrashReport
        fields = '__all__'
        swagger_schema_fields = {
            "title": "–û—Ç—á–µ—Ç –æ –º—É—Å–æ—Ä–µ",
            "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞—Ö —Å–∫–æ–ø–ª–µ–Ω–∏—è –º—É—Å–æ—Ä–∞"
        }

class CollectionPointSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ —Å–±–æ—Ä–∞ –æ—Ç—Ö–æ–¥–æ–≤.
    """
    class Meta:
        model = CollectionPoint
        fields = '__all__'
        swagger_schema_fields = {
            "title": "–ü—É–Ω–∫—Ç —Å–±–æ—Ä–∞",
            "description": "–ú–µ—Å—Ç–æ –ø—Ä–∏–µ–º–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—Ö–æ–¥–æ–≤"
        }

class AchievementSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
    """
    class Meta:
        model = Achievement
        fields = ['id', 'name', 'description', 'icon', 'points_required', 'type', 'created_at']
        swagger_schema_fields = {
            "title": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            "description": "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
            "example": {
                "name": "–ù–∞—á–∏–Ω–∞—é—â–∏–π —ç–∫–æ–ª–æ–≥",
                "description": "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç –æ –º—É—Å–æ—Ä–µ",
                "icon": "üå±",
                "points_required": 10,
                "type": "reports"
            }
        }

class UserAchievementSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    achievement_details = AchievementSerializer(source='achievement', read_only=True)

    class Meta:
        model = UserAchievement
        fields = '__all__'
        swagger_schema_fields = {
            "title": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "description": "–°–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º"
        }

class UserRegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ['username', 'email', 'password']

    def create(self, validated_data):
        user = User(**validated_data)
        user.set_password(validated_data['password'])  # –•—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        user.save()
        return user

class NewsSerializer(serializers.ModelSerializer):
    class Meta:
        model = News
        fields = '__all__' 